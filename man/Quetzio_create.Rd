% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Quetzio.R
\name{Quetzio_create}
\alias{Quetzio_create}
\title{Create new Quetzio object}
\usage{
Quetzio_create(
  source_method,
  module_id,
  source_yaml = NULL,
  source_yaml_default = NULL,
  source_gsheet_id = NULL,
  source_gsheet_sheetname = NULL,
  source_object = NULL,
  source_object_default = NULL,
  output_gsheet = FALSE,
  output_gsheet_id = NULL,
  output_gsheet_sheetname = NULL,
  desc_yaml = NULL,
  desc_gsheet_id = NULL,
  desc_gsheet_sheetname = NULL,
  desc_object = NULL,
  randomize_order = FALSE,
  div_id = NULL,
  custom_css = NULL,
  lang = "en",
  custom_txts = NULL,
  use_modal = TRUE,
  render_ui = TRUE,
  link_id = NULL
)
}
\arguments{
\item{source_method}{character string specifying in what form the source
config file will be provided. Can be either 'gsheet', 'yaml' or 'raw'.
Necessity of other arguments is dependent on this choice. For more info
see 'details'}

\item{module_id}{character string with unique id for the module. If not
specified, it will be automatically generated}

\item{source_yaml}{path to the source yaml file}

\item{source_yaml_default}{path to the optional default options for items
generated with source list. Only when \code{source_method == 'yaml'} or
\code{source_method == 'raw'} and source object of class \code{list} is povided..}

\item{source_gsheet_id}{id of the source googlesheet file}

\item{source_gsheet_sheetname}{name of the source spreadsheet}

\item{source_object}{object of class \code{list} (similiar in structure to
'yaml' source) or \code{data.frame} (similiar in structure to 'googlesheet'
source) to be the source of questions. You can create a sample data.frame
with \code{create_survey_source()}. Needed when \code{source_method == 'raw'}}

\item{source_object_default}{list containing optional default options for
items generated with source list. Only when \code{source_method == 'yaml'} or
\code{source_method == 'raw'} and source object of class \code{list} is povided.}

\item{output_gsheet}{logical: do you wish to save the answers automatically
to the googlesheet. If TRUE, the 'output_gsheet_id' and 'output_gsheet_sheetname'
arguments need to be specified. Defaults to FALSE}

\item{output_gsheet_id}{id of the output googlesheet file. If not specified,
the same googlesheet as for 'source' will be used}

\item{output_gsheet_sheetname}{name of the output spreadsheet}

\item{desc_yaml}{path to the optional instruction and item
descriptions.}

\item{desc_gsheet_id}{id of the googlesheet to provide optional instruction
and item descriptions. Defaults to 'source_gsheet_id', if not provided.}

\item{desc_gsheet_sheetname}{name of source for optional instruction and
item descriptions.}

\item{desc_object}{object of class \code{list} or \code{data.frame} to be the source
of optional instruction and item descriptions.}

\item{randomize_order}{logical: do you wish to randomize order in which the
items will appear? Defaults to FALSE}

\item{div_id}{character string with unique id for the created div. If not
specified, it will be set to 'form'}

\item{custom_css}{custom css for classes 'mandatory star' and 'invalid_input'.
If not specified, default look will be used:
\itemize{
\item{invalid_input = "outline: red; outline-style: dashed; outline-offset: 10px;"}
\item{mandatory_star = "color: red;"}
\item{quetzio_submit = "color: #fff; background-color: #337ab7; border-color: #2e6da4; width: 200px;"}
\item{quetzio_description = "font-size: 0.9em;"}
}
You can also add styles for different classes contained within the div
of the questionnaire - styles will be affecting only elements within
this specific questionnaire.}

\item{lang}{language to use. For now only 'en' and 'pl' are supported.}

\item{custom_txts}{named list with custom labels for specified language.
For more information look upon documentation for 'quetzio_txt'}

\item{use_modal}{logical indicating if modalDialog for invalid inputs
should be triggered. Defaults to TRUE}

\item{render_ui}{logical indicating if the UI for questionnaire should be
rendered}

\item{link_id}{character specifying the 'link_id' of the 'quetzio_link_server'
object, modifying its namespace. Only used internally, if the questionnaire
is part of linked server. Don't set it manually!}
}
\value{
R6 object of class \code{Quetzio}
}
\description{
Create new Quetzio object
}
\details{
Currently, there are multiple methods both for source, which will generate
the inputs, and for output. Mandatory arguments change depending of your
choices:
\itemize{
\item for source:
\itemize{
\item \code{source_method == 'yaml'}: 'source_yaml'
\item \code{source_method == 'gsheet'}: 'source_gsheet_id,' 'source_gsheet_sheetname'
\item \code{source_method == 'raw'}: 'source_object'
}
\item for output:
\itemize{
\item \code{output_gsheet == TRUE}: 'output_gsheet_id' (if other than 'source_gsheet_id')
and 'output_gsheet_sheetname'
}
}

There are also some optional functionalities, that can be used with sources.
\itemize{
\item optional instructions and item descriptions - they are generated only
if one of the following is provided:
\itemize{
\item \code{desc_yaml}: rendering from YAML file
\item \code{desc_gsheet_sheetname}: rendering from googlesheet. If the \code{source_method}
isn't \code{gsheet} or the 'googlesheet_id' containing description is different
from source, the \code{desc_gsheet_id} need to be provided too
\item \code{desc_object}: rendering from R object of classes 'data.frame' or 'list'
}
\item optional default configuration - it is used per shinyInput type.
Need to provide either \code{source_yaml_default} or \code{source_object_default}.
}
}
\examples{
## Only run example in interactive R sessions

if (interactive()) {
  
  # load libraries
  library(shiny)
  library(shiny.quetzio)
  
  # create ui
  ui <- fluidPage(
    column(6, align = "center",
           # bind the UI with correct module_id
           Quetzio_UI("my_quetzio")
    ),
    column(6,
           h2("State of", tags$i("quetzio_server")),
           h3("Is it done?"),
           verbatimTextOutput("quetzio_is_done"),
           h3("Error messages?"),
           verbatimTextOutput("quetzio_message"),
           h3("Answers"),
           verbatimTextOutput("quetzio_answers")
    )
  )
  
  server <- function(input, output, session) {
    
    # initialize new quetzio
    questionnaire <- Quetzio_create(
      # load questions from R object
      source_method = "raw",
      source_object = quetzio_examples$questions_lists$simple_quetzio,
      # optionally add descriptions
      desc_object = quetzio_examples$description_lists$simple_quetzio,
      # use the same module_id as in UI binding
      module_id = "my_quetzio",
      # custom_css to give margin but not center options explicitly
      # it will affect only elements within the form div
      custom_css = list(
        "shiny-options-group" = "text-align: left; margin-left: 45\%"
      ),
      # you can also optionally give div unique id - useful for external css styling
      div_id = "my_questio_div_id"
    )
    
    # render objects to show your questionnaire status
    output$quetzio_is_done <-
      renderPrint(questionnaire$is_done())
    output$quetzio_message <-
      renderPrint(questionnaire$message())
    output$quetzio_answers <-
      renderPrint(questionnaire$answers())
  }
  
  shinyApp(ui, server)
  
}
}
