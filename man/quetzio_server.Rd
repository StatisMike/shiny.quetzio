% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/survey_module.R
\docType{class}
\name{quetzio_server}
\alias{quetzio_server}
\title{Quetzio Server class}
\description{
Create R6-based server module to generate and hold the state
of your questionnaire
}
\examples{
## Only run example in interactive R sessions

if (interactive()) {

# load libraries
library(shiny)
library(shiny.survey)

# create ui
ui <- fluidPage(
      column(6, align = "center",
             # bind the UI with correct module_id
             quetzio_UI("my_quetzio")
             ),
      column(6,
             h2("State of", tags$i("quetzio_server")),
             h3("Is it done?"),
             verbatimTextOutput("quetzio_is_done"),
             h3("Error messages?"),
             verbatimTextOutput("quetzio_message"),
             h3("Answers"),
             verbatimTextOutput("quetzio_answers")
             )
)

server <- function(input, output, session) {

  # initialize new quetzio
  questionnaire <- quetzio_server$new(
    # load questions from R object
    source_method = "raw",
    source_object = quetzio_examples$questions_lists$simple_quetzio,
    # optionally add descriptions
    desc_object = quetzio_examples$description_lists$simple_quetzio,
    # use the same module_id as in UI binding
    module_id = "my_quetzio",
    # custom_css to give margin but not center options explicitly
    # it will affect only elements within the form div
    custom_css = list(
      "shiny-options-group" = "text-align: left; margin-left: 45\%"
    ),
    # you can also optionally give div unique id - useful for external styling
    div_id = "my_questio_div_id"
  )

  # render objects to show your questionnaire status
  output$quetzio_is_done <-
    renderPrint(questionnaire$is_done())
  output$quetzio_message <-
    renderPrint(questionnaire$message())
  output$quetzio_answers <-
    renderPrint(questionnaire$answers())
}

shinyApp(ui, server)

}
}
\seealso{
quetzio_UI
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{source_list}}{List containing the data for all the inputs}

\item{\code{description}}{List containing survey instruction and description}

\item{\code{div_id}}{ID of the div containing the survey UI}

\item{\code{module_id}}{ID of the shiny module}

\item{\code{button_labels}}{character vector of length two with labels for submit
button in active and disabled state}

\item{\code{is_done}}{logical reactiveVal indicating if the survey has been completed}

\item{\code{message}}{reactiveVal catching any warning messages}

\item{\code{answers}}{reactiveVal object containing list with answers to questions}

\item{\code{module_ui_id}}{character string used to generate UI. It needs to
be modified when linking the questionnaires}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-toggle_ui}{\code{quetzio_server$toggle_ui()}}
\item \href{#method-new}{\code{quetzio_server$new()}}
\item \href{#method-get_answers_df}{\code{quetzio_server$get_answers_df()}}
\item \href{#method-update_labels}{\code{quetzio_server$update_labels()}}
\item \href{#method-update_values}{\code{quetzio_server$update_values()}}
\item \href{#method-clone}{\code{quetzio_server$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-toggle_ui"></a>}}
\if{latex}{\out{\hypertarget{method-toggle_ui}{}}}
\subsection{Method \code{toggle_ui()}}{
method to change the state of the UI
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{quetzio_server$toggle_ui(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{logical indicating what should be the state of the UI. If TRUE,
then the UI will be rendered.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initializing the 'quetzio_server' object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{quetzio_server$new(
  source_method,
  source_yaml = NULL,
  source_yaml_default = NULL,
  source_gsheet_id = NULL,
  source_gsheet_sheetname = NULL,
  source_object = NULL,
  output_gsheet = FALSE,
  output_gsheet_id = NULL,
  output_gsheet_sheetname = NULL,
  desc_yaml = NULL,
  desc_gsheet_id = NULL,
  desc_gsheet_sheetname = NULL,
  desc_object = NULL,
  module_id = NULL,
  div_id = NULL,
  custom_css = NULL,
  button_labels = c("Submit", "Cannot submit", "Submitted!", "Error occured!"),
  render_ui = TRUE,
  link_id = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{source_method}}{character string specifying in what form the source
config file will be provided. Can be either 'gsheet', 'yaml' or 'raw'.
Necessity of other arguments is dependent on this choice. For more info
see 'details'}

\item{\code{source_yaml}}{path to the source yaml file}

\item{\code{source_yaml_default}}{path to the optional default options for items
generated with 'source_yaml' file. Only when \code{source_method == 'yaml'}.}

\item{\code{source_gsheet_id}}{id of the source googlesheet file}

\item{\code{source_gsheet_sheetname}}{name of the source spreadsheet}

\item{\code{source_object}}{object of class \code{list} (similiar in structure to
'yaml' source) or \code{data.frame} (similiar in structure to 'googlesheet'
source) to be the source of questions. You can create a sample data.frame
with \code{create_survey_source()}. Needed when \code{source_method == 'raw'}}

\item{\code{output_gsheet}}{logical: do you wish to save the answers automatically
to the googlesheet. If TRUE, the 'output_gsheet_id' and 'output_gsheet_sheetname'
arguments need to be specified. Defaults to FALSE}

\item{\code{output_gsheet_id}}{id of the output googlesheet file. If not specified,
the same googlesheet as for 'source' will be used}

\item{\code{output_gsheet_sheetname}}{name of the output spreadsheet}

\item{\code{desc_yaml}}{path to the optional instruction and item
descriptions.}

\item{\code{desc_gsheet_id}}{id of the googlesheet to provide optional instruction
and item descriptions. Defaults to 'source_gsheet_id', if not provided.}

\item{\code{desc_gsheet_sheetname}}{name of source for optional instruction and
item descriptions.}

\item{\code{desc_object}}{object of class \code{list} or \code{data.frame} to be the source
of optional instruction and item descriptions.}

\item{\code{module_id}}{character string with unique id for the module. If not
specified, it will be automatically generated}

\item{\code{div_id}}{character string with unique id for the created div. If not
specified, it will be set to 'form'}

\item{\code{custom_css}}{custom css for classes 'mandatory star' and 'invalid_input'.
If not specified, default look will be used:
\itemize{
\item{invalid_input = "outline: red; outline-style: dashed; outline-offset: 10px;"}
\item{mandatory_star = "color: red;"}
}}

\item{\code{button_labels}}{character vector of length four with labels for submit
button i all states. Defaults to:
\code{c('Submit', 'Cannot submit', 'Submitted!', 'Error occured!')}}

\item{\code{render_ui}}{logical indicating if the UI for questionnaire should be
rendered}

\item{\code{link_id}}{character specifying the 'link_id' of the 'quetzio_link_server'
object, modifying its namespace. Only used internally, if the questionnaire
is part of linked server. Don't set it manually.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Currently, there are multiple methods both for source, which will generate
the inputs, and for output. Mandatory arguments change depending of your
choices:
\itemize{
\item for source:
\itemize{
\item \code{source_method == 'yaml'}: 'source_yaml'
\item \code{source_method == 'gsheet'}: 'source_gsheet_id,' 'source_gsheet_sheetname'
\item \code{source_method == 'raw'}: 'source_object'
}
\item for output:
\itemize{
\item \code{output_gsheet == TRUE}: 'output_gsheet_id' (if other than 'source_gsheet_id')
and 'output_gsheet_sheetname'
}
}

There are also some optional functionalities, that can be used with sources.
\itemize{
\item optional instructions and item descriptions - they are generated only
if one of the following is provided:
\itemize{
\item \code{desc_yaml}: rendering from YAML file
\item \code{desc_gsheet_sheetname}: rendering from googlesheet. If the \code{source_method}
isn't \code{gsheet} or the 'googlesheet_id' containing description is different
from source, the \code{desc_gsheet_id} need to be provided too
\item \code{desc_object}: rendering from R object of classes 'data.frame' or 'list'
}
\item optional default configuration - it is used for a type of shinyInput.
Need to provide \code{source_yaml_default} - there are no other methods ATM.
}
}

\subsection{Returns}{
the 'quetzio_server' serverModule
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_answers_df"></a>}}
\if{latex}{\out{\hypertarget{method-get_answers_df}{}}}
\subsection{Method \code{get_answers_df()}}{
method to get preprocessed answers in the form of dataframe
(only if all of the questionnaires are done)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{quetzio_server$get_answers_df()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
data.frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_labels"></a>}}
\if{latex}{\out{\hypertarget{method-update_labels}{}}}
\subsection{Method \code{update_labels()}}{
Method to update labels on the change in reactive
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{quetzio_server$update_labels(
  trigger,
  source_method,
  source_yaml = NULL,
  source_gsheet_id = NULL,
  source_gsheet_sheetname = NULL,
  source_object = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{trigger}}{reactive which will trigger the update. It needs to take
values linked to the changes in the source}

\item{\code{source_method}}{character string specifying in what form the source
config file will be provided. Can be either 'gsheet', 'yaml' or 'raw'.
Necessity of other arguments is dependent on this choice}

\item{\code{source_yaml}}{path to the source yaml file}

\item{\code{source_gsheet_id}}{id of the source googlesheet file}

\item{\code{source_gsheet_sheetname}}{name of the source spreadsheet}

\item{\code{source_object}}{object of class \code{list} (similiar in structure to
'yaml' source) or \code{data.frame} (similiar in structure to 'googlesheet'
source) to be the source of questions. You can create a sample data.frame
with \code{create_survey_source()}. Needed when \code{source_method == 'raw'}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_values"></a>}}
\if{latex}{\out{\hypertarget{method-update_values}{}}}
\subsection{Method \code{update_values()}}{
Method to update selected values on the change in reactive
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{quetzio_server$update_values(values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{values}}{reactive which will trigger the update and contain named list
with values to update. List need to be named, as the names are going to be
used to identify which inputId to update}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{quetzio_server$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
