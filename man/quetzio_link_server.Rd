% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/link_module.R
\docType{class}
\name{quetzio_link_server}
\alias{quetzio_link_server}
\title{Quetzio Link Server class}
\description{
Create R6-based server module to generate and hold the state of
multiple linked 'quetzio_server' objects
}
\examples{

## ------------------------------------------------
## Method `quetzio_link_server$new`
## ------------------------------------------------


## Only run example in interactive R sessions

if (interactive()) {

 #### create shinyApp

 # load libraries
 library(shiny)
 library(shiny.quetzio)

 # create ui
 ui <- fluidPage(
   column(6, align = "center",
          # bind the UI with correct link_id
          quetzio_link_UI("my_quetzio_link")
   ),
   column(6,
          h2("State of", tags$i("quetzio_link_server")),
          h3("Completion rate"),
          verbatimTextOutput("quetzio_completion"),
          h3("Error messages?"),
          verbatimTextOutput("quetzio_message"),
          h3("Answers"),
          verbatimTextOutput("quetzio_answers")
   )
 )

 server <- function(input, output, session) {

   # initialize new quetzio link
   linked_questionnaires <- quetzio_link_server$new(
     # initialize quetzio_servers within it (give them names!)
     quetzio_first = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$link_quetzio_1,
       desc_object = quetzio_examples$description_lists$link_quetzio_1,
       module_id = "my_first_quetzio",
     custom_css = list(
         "quetzio_list" = "text-align: left; margin-left: 35\%;"
     )
     ),
     quetzio_second = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$link_quetzio_2,
       desc_object = quetzio_examples$description_lists$link_quetzio_2,
       module_id = "my_second_quetzio",
       custom_css = list(
         "shiny-options-group" = "text-align: left; margin-left: 45\%;"
       )
     ),
     quetzio_third = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$link_quetzio_3,
       desc_object = quetzio_examples$description_lists$link_quetzio_3,
       module_id = "my_thirdt_quetzio"
     ),
     link_id = "my_quetzio_link"
   )

   # render objects from quetzio_link
   output$quetzio_completion <-
     renderPrint(linked_questionnaires$completion())
   output$quetzio_message <-
     renderPrint(linked_questionnaires$message())
   output$quetzio_answers <-
     renderPrint(linked_questionnaires$answers())
 }

 shinyApp(ui, server)

}


## ------------------------------------------------
## Method `quetzio_link_server$update_labels`
## ------------------------------------------------

## only run examples in interactive environment

if (interactive()) {

 library(shiny)
 library(shiny.quetzio)

 ui <- fluidPage(
   # some input to trigger label update
   selectizeInput("gender", "What is your gender?",
                  choices = c("Male" = "M",
                              "Female" = "F",
                              "I identify as neither of above" = "O",
                              "Prefer not to say" = "NI"),
                  selected = "NI"),
   tags$hr(),
   # quetzio to update labels
   quetzio_link_UI("labels_link")
 )

 server <- function(input, output, session) {

   quetzio_link <- quetzio_link_server$new(
     gender = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$gender_update,
       module_id = "updating_labels"
     ),
     quetzio_2nd = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$simple_quetzio,
       module_id = "second_in_link"
     ),
     link_id = "labels_link")

   # trigger need to be reactive
   gender_react <- reactive(input$gender)

   # update labels method call
   quetzio_link$update_labels(
     # you need to provide the name of the quetzio_server in link
     # where you need to update labels
     quetzio_name = "gender",
     # the trigger needs to be reactive, but without the parentheses
     trigger = gender_react,
     source_method = "raw",
     source_object = quetzio_examples$label_update$gender_update
   )
 }
 shinyApp(ui, server)
}



## ------------------------------------------------
## Method `quetzio_link_server$update_values`
## ------------------------------------------------


## only run examples in interactive environment

if (interactive()) {

 library(shiny)
 library(shiny.quetzio)

 ui <- fluidPage(
   # first questionnaire to get values from
   column(6,
          h1("Finish first questionnaire"),
          quetzio_UI("first_questionnaire")
   ),
   # quetzio link to update values
   column(6,
          h1("Update values of quetzio link!"),
          actionButton("update_vals", "Update values"),
          tags$hr(),
          quetzio_link_UI("updating_link")
   )
 )

 server <- function(input, output, session) {

   quetzio_1st <- quetzio_server$new(
     source_method = "raw",
     source_object = quetzio_examples$questions_lists$simple_quetzio,
     module_id = "first_questionnaire"
   )

   quetzio_link <- quetzio_link_server$new(
     value_update = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$simple_quetzio,
       module_id = "first_in_link"
     ),
     another_one = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$link_quetzio_2,
       module_id = "second_in_link"
     ),
     link_id = "updating_link"
   )
   # update values on button press
   observeEvent(input$update_vals, {
     quetzio_link$update_values(
       # you need to provide quetzio name in the link to update
       quetzio_name = "value_update",
       # you can use answers from one questionnaire to update another, though
       # the used values can be any other static named list
       values = quetzio_1st$answers()
     )
   })
 }
 shinyApp(ui, server)
}

}
\seealso{
quetzio_server

quetzio_link_UI
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{link_id}}{character with id of the quetzio_link_module}

\item{\code{completion}}{reactiveVal object holding the rate of linked
questionnaires completion}

\item{\code{message}}{reactiveVal object holding the list of linked questionnaires
error messages}

\item{\code{answers}}{reactiveVal object holding the list of answers to the
linked questionnaires}

\item{\code{quetzio_list}}{reactiveValues holding the linked 'quetzio_server's}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{quetzio_link_server$new()}}
\item \href{#method-get_answers_df}{\code{quetzio_link_server$get_answers_df()}}
\item \href{#method-update_labels}{\code{quetzio_link_server$update_labels()}}
\item \href{#method-update_values}{\code{quetzio_link_server$update_values()}}
\item \href{#method-clone}{\code{quetzio_link_server$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialization of the 'quetzio_link_server' object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{quetzio_link_server$new(
  link_id,
  ...,
  output_gsheet = FALSE,
  output_gsheet_id = NULL,
  output_gsheet_sheetname = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{link_id}}{character specifying the module ID of created object. Needs
to be identical to the one specified inside every 'quetzio_server' objects
provided to the object.}

\item{\code{...}}{'quetzio_server' objects that are going to be connected by the
link. They are all needed to be named - with the names providing the path
to the answers of their questions.
Moreover, they need to be in initialized state: \code{quetzio_server$new(...)}}

\item{\code{output_gsheet}}{logical: do you wish to save the answers automatically
to the googlesheet. If TRUE, the 'output_gsheet_id' and 'output_gsheet_sheetname'
arguments need to be specified. Defaults to FALSE}

\item{\code{output_gsheet_id}}{id of the output googlesheet file}

\item{\code{output_gsheet_sheetname}}{name of the output spreadsheet}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
## Only run example in interactive R sessions

if (interactive()) {

 #### create shinyApp

 # load libraries
 library(shiny)
 library(shiny.quetzio)

 # create ui
 ui <- fluidPage(
   column(6, align = "center",
          # bind the UI with correct link_id
          quetzio_link_UI("my_quetzio_link")
   ),
   column(6,
          h2("State of", tags$i("quetzio_link_server")),
          h3("Completion rate"),
          verbatimTextOutput("quetzio_completion"),
          h3("Error messages?"),
          verbatimTextOutput("quetzio_message"),
          h3("Answers"),
          verbatimTextOutput("quetzio_answers")
   )
 )

 server <- function(input, output, session) {

   # initialize new quetzio link
   linked_questionnaires <- quetzio_link_server$new(
     # initialize quetzio_servers within it (give them names!)
     quetzio_first = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$link_quetzio_1,
       desc_object = quetzio_examples$description_lists$link_quetzio_1,
       module_id = "my_first_quetzio",
     custom_css = list(
         "quetzio_list" = "text-align: left; margin-left: 35\%;"
     )
     ),
     quetzio_second = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$link_quetzio_2,
       desc_object = quetzio_examples$description_lists$link_quetzio_2,
       module_id = "my_second_quetzio",
       custom_css = list(
         "shiny-options-group" = "text-align: left; margin-left: 45\%;"
       )
     ),
     quetzio_third = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$link_quetzio_3,
       desc_object = quetzio_examples$description_lists$link_quetzio_3,
       module_id = "my_thirdt_quetzio"
     ),
     link_id = "my_quetzio_link"
   )

   # render objects from quetzio_link
   output$quetzio_completion <-
     renderPrint(linked_questionnaires$completion())
   output$quetzio_message <-
     renderPrint(linked_questionnaires$message())
   output$quetzio_answers <-
     renderPrint(linked_questionnaires$answers())
 }

 shinyApp(ui, server)

}

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_answers_df"></a>}}
\if{latex}{\out{\hypertarget{method-get_answers_df}{}}}
\subsection{Method \code{get_answers_df()}}{
method to get preprocessed answers in the form of dataframe
(only if the questionnaire is done)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{quetzio_link_server$get_answers_df()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
data.frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_labels"></a>}}
\if{latex}{\out{\hypertarget{method-update_labels}{}}}
\subsection{Method \code{update_labels()}}{
Method to update labels on the change in reactive
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{quetzio_link_server$update_labels(
  quetzio_name,
  trigger,
  source_method,
  source_yaml = NULL,
  source_gsheet_id = NULL,
  source_gsheet_sheetname = NULL,
  source_object = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{quetzio_name}}{string indicating in which questionnaire
the questions to update are located}

\item{\code{trigger}}{reactive which will trigger the update. It needs to take
values linked to the changes in the source}

\item{\code{source_method}}{character string specifying in what form the source
config file will be provided. Can be either 'gsheet', 'yaml' or 'raw'.
Necessity of other arguments is dependent on this choice. For more info
see 'details'}

\item{\code{source_yaml}}{path to the source yaml file}

\item{\code{source_gsheet_id}}{id of the source googlesheet file}

\item{\code{source_gsheet_sheetname}}{name of the source spreadsheet}

\item{\code{source_object}}{object of class \code{list} (similiar in structure to
'yaml' source) or \code{data.frame} (similiar in structure to 'googlesheet'
source) to be the source of questions. You can create a sample data.frame
with \code{create_survey_source()}. Needed when \code{source_method == 'raw'}}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{## only run examples in interactive environment

if (interactive()) {

 library(shiny)
 library(shiny.quetzio)

 ui <- fluidPage(
   # some input to trigger label update
   selectizeInput("gender", "What is your gender?",
                  choices = c("Male" = "M",
                              "Female" = "F",
                              "I identify as neither of above" = "O",
                              "Prefer not to say" = "NI"),
                  selected = "NI"),
   tags$hr(),
   # quetzio to update labels
   quetzio_link_UI("labels_link")
 )

 server <- function(input, output, session) {

   quetzio_link <- quetzio_link_server$new(
     gender = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$gender_update,
       module_id = "updating_labels"
     ),
     quetzio_2nd = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$simple_quetzio,
       module_id = "second_in_link"
     ),
     link_id = "labels_link")

   # trigger need to be reactive
   gender_react <- reactive(input$gender)

   # update labels method call
   quetzio_link$update_labels(
     # you need to provide the name of the quetzio_server in link
     # where you need to update labels
     quetzio_name = "gender",
     # the trigger needs to be reactive, but without the parentheses
     trigger = gender_react,
     source_method = "raw",
     source_object = quetzio_examples$label_update$gender_update
   )
 }
 shinyApp(ui, server)
}


}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_values"></a>}}
\if{latex}{\out{\hypertarget{method-update_values}{}}}
\subsection{Method \code{update_values()}}{
Method to update selected values on the change in reactive
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{quetzio_link_server$update_values(quetzio_name, values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{quetzio_name}}{string indicating in which questionnaire
the item values to update are located}

\item{\code{values}}{list of values to update questionnaire with. List needs to be named,
as the names are going to be used to identify which inputId to update}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{
## only run examples in interactive environment

if (interactive()) {

 library(shiny)
 library(shiny.quetzio)

 ui <- fluidPage(
   # first questionnaire to get values from
   column(6,
          h1("Finish first questionnaire"),
          quetzio_UI("first_questionnaire")
   ),
   # quetzio link to update values
   column(6,
          h1("Update values of quetzio link!"),
          actionButton("update_vals", "Update values"),
          tags$hr(),
          quetzio_link_UI("updating_link")
   )
 )

 server <- function(input, output, session) {

   quetzio_1st <- quetzio_server$new(
     source_method = "raw",
     source_object = quetzio_examples$questions_lists$simple_quetzio,
     module_id = "first_questionnaire"
   )

   quetzio_link <- quetzio_link_server$new(
     value_update = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$simple_quetzio,
       module_id = "first_in_link"
     ),
     another_one = quetzio_server$new(
       source_method = "raw",
       source_object = quetzio_examples$questions_lists$link_quetzio_2,
       module_id = "second_in_link"
     ),
     link_id = "updating_link"
   )
   # update values on button press
   observeEvent(input$update_vals, {
     quetzio_link$update_values(
       # you need to provide quetzio name in the link to update
       quetzio_name = "value_update",
       # you can use answers from one questionnaire to update another, though
       # the used values can be any other static named list
       values = quetzio_1st$answers()
     )
   })
 }
 shinyApp(ui, server)
}

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{quetzio_link_server$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
